#!/bin/sh

# ########################################################################
# This program is part of $PROJECT_NAME$
# License: GPL License (see COPYING)
# Authors:
#  Baron Schwartz
# Depends-on: pt-heartbeat
# ########################################################################

# ########################################################################
# Redirect STDERR to STDOUT; Nagios doesn't handle STDERR.
# ########################################################################
exec 2>&1

# ########################################################################
# Set up constants, etc.
# ########################################################################
STATE_OK=0
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4
EXITSTATUS=$STATE_OK

# ########################################################################
# Run the program.
# ########################################################################
main() {
   # Get command-line options
   for o; do
      case "${o}" in
         -c)        shift; OPT_CRIT="${1}"; shift; ;;
         -H)        shift; OPT_HOST="${1}"; shift; ;;
         -i)        shift; OPT_INTERVAL="${1}"; shift; ;;
         -l)        shift; OPT_USER="${1}"; shift; ;;
         -p)        shift; OPT_PASS="${1}"; shift; ;;
         -P)        shift; OPT_PORT="${1}"; shift; ;;
         -S)        shift; OPT_SOCK="${1}"; shift; ;;
         -t)        shift; OPT_TABLE="${1}";  shift; ;;
         -w)        shift; OPT_WARN="${1}"; shift; ;;
         --version) grep -A2 '^=head1 VERSION' "$0" | tail -n1; exit 0 ;;
         --help)    perl -00 -ne 'm/^  Usage:/ && print' "$0"; exit 0 ;;
         -*)        echo "Unknown command-line option ${o}.  Try --help."; exit 1; ;;
      esac
   done
   OPT_WARN=${OPT_WARN:-12}
   OPT_CRIT=${OPT_CRIT:-60}
   OPT_INTERVAL=${OPT_INTERVAL:-1}
   OPT_TABLE="${OPT_TABLE:-percona.deadlocks}"

   LEVEL=$(mysql_exec "SELECT COUNT(*) FROM ${OPT_TABLE} WHERE ts >= NOW() - INTERVAL ${OPT_INTERVAL} MINUTE")
   if [ $? = 0 ]; then
      NOTE="${LEVEL:-UNKNOWN} deadlocks in last ${OPT_INTERVAL} minutes"
      if [ "${LEVEL:-0}" -gt "${OPT_CRIT}" ]; then
         EXITSTATUS=$STATE_CRITICAL
         NOTE="CRIT $NOTE"
      elif [ "${LEVEL:-0}" -gt "${OPT_WARN}" ]; then
         EXITSTATUS=$STATE_WARNING
         NOTE="WARN $NOTE"
      else
         NOTE="OK $NOTE"
      fi
   else
      EXITSTATUS=$STATE_UNKNOWN
      NOTE="UNK could not count deadlocks"
   fi
   echo $NOTE
   exit $EXITSTATUS
}

# ########################################################################
# Execute a MySQL command.
# ########################################################################
mysql_exec() {
   mysql ${OPT_HOST:+-h"${OPT_HOST}"} ${OPT_USER:+-u"${OPT_USER}"} \
      ${OPT_PASS:+-p"${OPT_PASS}"} ${OPT_SOCK:+-S"${OPT_SOCK}"} ${OPT_PORT:+-P"${OPT_PORT}"} \
      -ss -e "$1"
}

# ########################################################################
# Execute the program if it was not included from another file.
# This makes it possible to include without executing, and thus test.
# ########################################################################
if    [ "$(basename -- "$0")" = "pmp-check-mysql-deadlocks" ] \
   || [ "$(basename -- "$0")" = "bash" -a "$_" = "$0" ]; then
   main "$@"
fi

# ############################################################################
# Documentation
# ############################################################################
: <<'DOCUMENTATION'
=pod

=head1 NAME

pmp-check-mysql-deadlocks - Alert when pt-deadlock-logger has recorded too many recent deadlocks.

=head1 SYNOPSIS

  Usage: pmp-check-mysql-deadlocks [OPTIONS]
  Options:
    -c CRIT     Critical threshold; default 60.
    -H HOST     MySQL hostname.
    -i INTERVAL Interval over which to count, in minutes; default 1.
    -l USER     MySQL username.
    -p PASS     MySQL password.
    -P PORT     MySQL port.
    -S SOCKET   MySQL socket file.
    -t TABLE    The database.table that pt-deadlock-logger uses; default percona.deadlocks.
    -w WARN     Warning threshold; default 12.
    --help      Print help and exit.
    --version   Print version and exit.
  Use perldoc to read embedded documentation with more details.

=head1 DESCRIPTION

This Nagios plugin looks at the table that pt-deadlock-logger (part of Percona
Toolkit) maintains, and when there have been too many recent deadlocks, it
alerts.

=head1 DOWNLOADING

Visit L<http://www.percona.com/software/percona-monitoring-plugins/> to download
the latest release of Percona Monitoring Plugins.

=head1 AUTHORS

Baron Schwartz

=head1 COPYRIGHT, LICENSE, AND WARRANTY

This program is copyright 2012 Baron Schwartz, 2012 Percona Inc.
Feedback and improvements are welcome.

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, version 2; OR the Perl Artistic License.  On UNIX and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA  02111-1307  USA.

=head1 VERSION

Percona Monitoring Plugins pmp-check-mysql-deadlocks 1.0.0

=cut

DOCUMENTATION
