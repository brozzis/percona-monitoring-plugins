#!/bin/sh

# ########################################################################
# This program is part of $PROJECT_NAME$
# License: GPL License (see COPYING)
# Authors:
#  Baron Schwartz
# ########################################################################

# ########################################################################
# Redirect STDERR to STDOUT; Nagios doesn't handle STDERR.
# ########################################################################
exec 2>&1

# ########################################################################
# Set up constants, etc.
# ########################################################################
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4
EXITSTATUS=$STATE_OK

# ########################################################################
# Run the program.
# ########################################################################
main() {
   # Get options
   for o; do
      case "${o}" in
         -c)        shift; OPT_CRIT="${1}"; shift; ;;
         -H)        shift; OPT_HOST="${1}"; shift; ;;
         -l)        shift; OPT_USER="${1}"; shift; ;;
         -L)        shift; OPT_LESS="${1}";        ;;
         -o)        shift; OPT_OPER="${1}"; shift; ;;
         -p)        shift; OPT_PASS="${1}"; shift; ;;
         -P)        shift; OPT_PORT="${1}"; shift; ;;
         -S)        shift; OPT_SOCK="${1}"; shift; ;;
         -T)        shift; OPT_TRAN="${1}"; shift; ;;
         -w)        shift; OPT_WARN="${1}"; shift; ;;
         -x)        shift; OPT_VAR1="${1}"; shift; ;;
         -y)        shift; OPT_VAR2="${1}"; shift; ;;
         --version) grep -A2 '^=head1 VERSION' "$0" | tail -n1; exit 0 ;;
         --help)    perl -00 -ne 'm/^  Usage:/ && print' "$0"; exit 0 ;;
         -*)        echo "Unknown option ${o}.  Try --help."; exit 1; ;;
      esac
   done

   # Validate the options.
   OPT_ERR=""
   if [ -z "${OPT_CRIT}${OPT_WARN}" ]; then
      OPT_ERR="you must specify either -c or -w"
   elif [ -z "${OPT_VAR1}" ]; then
      OPT_ERR="you must specify -x"
   elif [ "${OPT_OPER}" -a -z "${OPT_VAR2}" ]; then
      OPT_ERR="you specified -o but not -y"
   elif [ "${OPT_VAR2}" -a -z "${OPT_OPER}" ]; then
      OPT_ERR="you specified -y but not -o"
   fi
   if [ "${OPT_ERR}" ]; then
      echo "Error: $OPT_ERR. Try --help."
      exit 1
   fi

   EXITSTATUS=$STATE_UNKNOWN
   NOTE="UNK could not resolve the query."

   LEVEL=$(mysql_exec "SHOW STATUS LIKE 'Uptime'")
   if [ $? = 0 ]; then
      LEVEL=$(echo "${LEVEL}" | cut -f2)
      NOTE="${LEVEL} seconds since MySQL was started"
      if [ "${LEVEL:-0}" -lt "${OPT_WARN}" ]; then
         EXITSTATUS=$STATE_WARNING
         NOTE="WARN $NOTE"
      else
         NOTE="OK $NOTE"
      fi
   fi

   echo $NOTE
   exit $EXITSTATUS
}

# ########################################################################
# Execute a MySQL command.
# ########################################################################
mysql_exec() {
   mysql ${OPT_HOST:+-h"${OPT_HOST}"} ${OPT_USER:+-u"${OPT_USER}"} \
      ${OPT_PASS:+-p"${OPT_PASS}"} ${OPT_SOCK:+-S"${OPT_SOCK}"} ${OPT_PORT:+-P"${OPT_PORT}"} \
      -ss -e "$1"
}

# ########################################################################
# Execute the program if it was not included from another file.
# This makes it possible to include without executing, and thus test.
# ########################################################################
if    [ "$(basename -- "$0")" = "pmp-check-mysql-status" ] \
   || [ "$(basename -- "$0")" = "bash" -a "$_" = "$0" ]; then
   main "$@"
fi

# ############################################################################
# Documentation
# ############################################################################
: <<'DOCUMENTATION'
=pod

=head1 NAME

pmp-check-mysql-status - Check items from MySQL SHOW GLOBAL STATUS output.

=head1 SYNOPSIS

  Usage: pmp-check-mysql-status [OPTIONS]
  Options:
    -c CRIT     Critical threshold.
    -H HOST     MySQL hostname.
    -l USER     MySQL username.
    -L          Comparisons to thresholds are less-than.
    -o OPERATOR The operator to apply to -x and -y.
    -p PASS     MySQL password.
    -P PORT     MySQL port.
    -S SOCKET   MySQL socket file.
    -T TRANS    Transformation to apply to the result.
    -w WARN     Warning threshold.
    -x VAR1     The first status or configuration variable.
    -y VAR2     The second status or configuration variable.
    --help      Print help and exit.
    --version   Print version and exit.
  Use perldoc to read embedded documentation with more details.

=head1 DESCRIPTION

This Nagios plugin captures SHOW GLOBAL STATUS and SHOW GLOBAL VARIABLES from
MySQL and evaluates expressions against them.  The general syntax is as follows:

  VAR1 [ OPERATOR VAR2 [ TRANSFORM ] ]

The result of evaluating this is compared against the -w and -c options as usual
to determine whether to raise a warning or critical alert.  You can optionally
invert the comparison so that the alert is raised if the result is less than the
threshold, not greater than.

For example, to warn if Threads_running is over 20, and critical alert if it is
over 40:

  -x Threads_running -w 20 -c 40

To warn if Threads_connected exceeds 80% of max_connections:

  -x Threads_connected -o / -y max_connections -T pct -w 80

This plugin does not support arbitrarily complex expressions, such as computing
the query cache hit ratio and alerting if it is less than some percentage.  If
you are trying to do that, you are probably doing it wrong.  Reasonable alerts,
which are not prone to too many false positives, focus only on a few simple
things; and most of the counters in SHOW STATUS are not useful for actionable
alerts anyway.  A dubiously useful example for the query cache might be to alert
if the hit-to-insert ratio falls below 2:1, as follows:

  -x Qcache_hits -o / -y Qcache_inserts -T pct -w 2 -L

Note that this is not an alert you are encouraged to configure; it is merely an
example of how to set a "less than" threshold instead of "greater than."

=head1 DOWNLOADING

Visit L<http://www.percona.com/software/percona-monitoring-plugins/> to download
the latest release of Percona Monitoring Plugins.

=head1 AUTHORS

Baron Schwartz

=head1 COPYRIGHT, LICENSE, AND WARRANTY

This program is copyright 2012 Baron Schwartz, 2012 Percona Inc.
Feedback and improvements are welcome.

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, version 2; OR the Perl Artistic License.  On UNIX and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA  02111-1307  USA.

=head1 VERSION

Percona Monitoring Plugins pmp-check-mysql-status 1.0.0

=cut

DOCUMENTATION
