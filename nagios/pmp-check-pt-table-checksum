#!/bin/sh

# ########################################################################
# This program is part of $PROJECT_NAME$
# License: GPL License (see COPYING)
# Authors:
#  Baron Schwartz
# ########################################################################

# ########################################################################
# Redirect STDERR to STDOUT; Nagios doesn't handle STDERR.
# ########################################################################
exec 2>&1

# ########################################################################
# Set up constants, etc.
# ########################################################################
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4
EXITSTATUS=$STATE_UNKNOWN

# ########################################################################
# Run the program.
# ########################################################################
main() {
   # Get options
   for o; do
      case "${o}" in
         -c)              shift; OPT_CRIT="${1}"; shift; ;;
         --defaults-file) shift; OPT_DEFT="${1}"; shift; ;;
         -H)              shift; OPT_HOST="${1}"; shift; ;;
         -l)              shift; OPT_USER="${1}"; shift; ;;
         -p)              shift; OPT_PASS="${1}"; shift; ;;
         -P)              shift; OPT_PORT="${1}"; shift; ;;
         -S)              shift; OPT_SOCK="${1}"; shift; ;;
         -T)              shift; OPT_TABLE="${1}"; shift; ;;
         -w)              shift; OPT_WARN="${1}"; shift; ;;
         --version)       grep -A2 '^=head1 VERSION' "$0" | tail -n1; exit 0 ;;
         --help)          perl -00 -ne 'm/^  Usage:/ && print' "$0"; exit 0 ;;
         -*)              echo "Unknown option ${o}.  Try --help."; exit 1; ;;
      esac
   done
   OPT_TABLE="${OPT_TABLE:-percona.checksums}"
   if [ -e '/etc/nagios/mysql.cnf' ]; then
      OPT_DEFT="${OPT_DEFT:-/etc/nagios/mysql.cnf}"
   fi

   EXITSTATUS=$STATE_UNKNOWN
   NOTE="UNK couldn't query the checksum table"

   # Set up a temp file to hold error messages from MySQL.
   TEMP=$(mktemp "/tmp/${0##*/}.XXXX") || exit $?
   trap 'rm -rf "${TEMP}" >/dev/null 2>&1' EXIT

   # Get the query from the documentation and execute it.
   SQL=$(get_magic_query "${0}" checksum_diff_query)
   PROBLEMS=$(mysql_exec "${SQL/CHECKSUM_TABLE/${OPT_TABLE}}" 2>"${TEMP}")
   if [ $? = 0 ]; then
      if [ "${PROBLEMS}" ]; then
         NOTE="pt-table-checksum found ${PROBLEMS}"
         if [ "${OPT_CRIT}" ]; then
            EXITSTATUS=$STATE_CRITICAL
            NOTE="CRIT $NOTE"
         else
            EXITSTATUS=$STATE_WARNING
            NOTE="WARN $NOTE"
         fi
      else
         NOTE="OK pt-table-checksum found no out-of-sync tables"
         EXITSTATUS=$STATE_OK
      fi
   else
      # If the query returns an error about table not found, then it's not an
      # error.
      if grep "Table '${OPT_TABLE}' doesn't exist" "${TEMP}" >/dev/null 2>&1; then
         NOTE="OK The pt-table-checksum table ${OPT_TABLE} doesn't exist"
         EXITSTATUS=$STATE_OK
      fi
   fi
   echo $NOTE
   exit $EXITSTATUS
}

# ########################################################################
# Execute a MySQL command.
# ########################################################################
mysql_exec() {
   mysql ${OPT_DEFT:+--defaults-file="${OPT_DEFT}"} ${OPT_HOST:+-h"${OPT_HOST}"} ${OPT_USER:+-u"${OPT_USER}"} \
      ${OPT_PASS:+-p"${OPT_PASS}"} ${OPT_SOCK:+-S"${OPT_SOCK}"} ${OPT_PORT:+-P"${OPT_PORT}"} \
      -ss -e "$1"
}

# ########################################################################
# Retrieve a paragraph from the given file, which includes MAGIC_$2 as a
# pattern.
# ########################################################################
get_magic_query() {
   perl -00 -ne"m/MAGIC_$2/ && print" "$1"
}

# ########################################################################
# Execute the program if it was not included from another file.
# This makes it possible to include without executing, and thus test.
# ########################################################################
if    [ "${0##*/}" = "pmp-check-pt-table-checksum" ] \
   || [ "${0##*/}" = "bash" -a "$_" = "$0" ]; then
   main "$@"
fi

# ############################################################################
# Documentation
# ############################################################################
: <<'DOCUMENTATION'
=pod

=head1 NAME

pmp-check-pt-table-checksum - Alert when pt-table-checksum finds data differences on a replica.

=head1 SYNOPSIS

  Usage: pmp-check-pt-table-checksum [OPTIONS]
  Options:
    -c CRIT         Raise a critical error instead of a warning.
    --defaults-file FILE Only read mysql options from the given file.
                    Defaults to /etc/nagios/mysql.cnf if it exists.
    -H HOST         MySQL hostname.
    -l USER         MySQL username.
    -p PASS         MySQL password.
    -P PORT         MySQL port.
    -S SOCKET       MySQL socket file.
    -T TABLE        The checksum table; default percona.checksums
    -w WARN         Warning threshold; ignored.
    --help          Print help and exit.
    --version       Print version and exit.
  Options must be given as --option value, not --option=value or -Ovalue.
  Use perldoc to read embedded documentation with more details.

=head1 DESCRIPTION

This Nagios plugin examines whether MySQL replication has drifted out of sync
with the master's data, according to checks performed by the pt-table-checksum
tool in Percona Toolkit.  It uses the following query to determine whether the
server's data matches its master's:

   SELECT /* MAGIC_checksum_diff_query */
   CONCAT(
      COUNT(*),
      ' chunks differ in ',
      COUNT(DISTINCT CONCAT(db, tbl)),
      ' tables, including ',
      MIN(CONCAT(db, '.', tbl)))
   FROM CHECKSUM_TABLE
   WHERE master_cnt <> this_cnt OR master_crc <> this_crc
      OR ISNULL(master_crc) <> ISNULL(this_crc)
   HAVING COUNT(*) > 0

The word CHECKSUM_TABLE is replaced by the value of the -T option.  If the table
specified by -T does not exist, no error or warning is raised. This makes it
possible to run this check on all MySQL servers by default, and only receive
alerts if a server is being checksummed by pt-table-checksum.

Alerts are raised at a WARNING level by default, but specifying the -c option
with any value will change this to CRITICAL instead.

This check should be backwards compatible with Maatkit's mk-table-checksum tool
as well.

=head1 PRIVILEGES

This plugin executes the following commands against MySQL:

=over

=item *

C<SELECT> against the specified table.

=back

This plugin executes no UNIX commands that may need special privileges. 

=head1 COPYRIGHT, LICENSE, AND WARRANTY

This program is copyright 2012-$CURRENT_YEAR$ Baron Schwartz, 2012-$CURRENT_YEAR$ Percona Inc.
Feedback and improvements are welcome.

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, version 2.  You should have received a copy of the GNU General
Public License along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.

=head1 VERSION

$PROJECT_NAME$ pmp-check-pt-table-checksum $VERSION$

=cut

DOCUMENTATION
